1 - Cocos template
2 - scene / layer / sprite
3 - Layer:
	cc.Layer -> Recebe touch events
	Layers pré definidos -> cc.Menu, cc.ColorLayer...
4 - Coordenadas cartesianas
5 - anchor point
6 - Action -> position, scale, rotation, visibility, opacity, color
7 - animation

8 - deletar resources padrões e importar os customizados
9 - main.js -> deletar de var plataform até director.setContentScaleFactor(...)
10 - MyApp.js -> deletar tudo
11 - main.js-> new cocos2dApp(MyScene) -> (MenuScene)
12 - Definindo a MenuScene:
	12.1 - MyApp.js:
		var MenuLayer = cc.Layer.extend({
  		  ctor : function(){
		        this._super();
		    },
		    init:function(){
		        this._super();

		        var director = cc.Director.getInstance();

		        var winsize = director.getWinSize();
		        var centerpos = cc.p(winsize.width / 2, winsize.height / 2);

		        var spritebg = cc.Sprite.create(s_HelloBG);
		        spritebg.setPosition(centerpos);
		        this.addChild(spritebg);

		        cc.MenuItemFont.setFontSize(60);

		        var menuItemPlay= cc.MenuItemSprite.create(
		            cc.Sprite.create(s_start_n), // normal state image
		            cc.Sprite.create(s_start_s), //select state image
		            this.onPlay, this);
		        var menu = cc.Menu.create(menuItemPlay);  //7. create the menu
		        menu.setPosition(centerpos);
		        this.addChild(menu);
		    },

		    onPlay : function(){
		       cc.log('onPlay')
		    }
		});

		var MenuScene = cc.Scene.extend({
		    onEnter:function () {
		        this._super();
		        var layer = new MenuLayer();
		        layer.init();
		        this.addChild(layer);
		    }
		});

13 - PlayScene:
	13.1 - 
		var PlayScene = cc.Scene.extend({
		    onEnter:function () {
		        this._super();
		        //add three layer in the right order
		        this.addChild(new BackgroundLayer());
		        this.addChild(new AnimationLayer());
		        this.addChild(new StatusLayer());
		    }
		});

	13.2 - 
		var BackgroundLayer = cc.Layer.extend({
		    ctor:function () {
		        this._super();
		        this.init();
		    },

		    init:function () {
		        this._super();

		        var winSize = cc.Director.getInstance().getWinSize();
		        //create the background image and position it at the center of screen
		        var centerPos = cc.p(winSize.width / 2, winSize.height / 2);
		        var spriteBG = cc.Sprite.create(s_PlayBG);
		        spriteBG.setPosition(centerPos);
		        this.addChild(spriteBG);
		    }
		});

	13.3 - 
		var AnimationLayer = cc.Layer.extend({
		    ctor:function () {
		        this._super();
		        this.init();
		    },
		    init:function () {
		        this._super();

		        var winsize = cc.Director.getInstance().getWinSize();

		        var centerPos = cc.p(80, 85);
		        //cerate the hero sprite
		        var spriteRunner = cc.Sprite.create(s_runner);
		        spriteRunner.setPosition(centerPos);

		        //create the move action
		        var actionTo = cc.MoveTo.create(2, cc.p(300, 85));
		        spriteRunner.runAction(cc.Sequence.create(actionTo));
		        this.addChild(spriteRunner);
		    }
		});

	13.4 -
		var StatusLayer = cc.Layer.extend({
		    labelCoin:null,
		    labelMeter:null,
		    coins:0,

		    ctor:function () {
		        this._super();
		        this.init();
		    },

		    init:function () {
		        this._super();

		        this.labelCoin = cc.LabelTTF.create("Coins:0", "Helvetica", 20);
		        this.labelCoin.setColor(cc.c3(0,0,0));//black color
		        this.labelCoin.setPosition(cc.p(70, winSize.height - 20));
		        this.addChild(this.labelCoin);

		        this.labelMeter = cc.LabelTTF.create("0M", "Helvetica", 20);
		        this.labelMeter.setPosition(cc.p(winSize.width - 70, winSize.height - 20));
		        this.addChild(this.labelMeter);
		    }
		});

14 - import running.png e running.plist!
	14.1 - lembrar de alterar o caminho do personagem para running

15 - AnimationLayer:
	15.1 - var AnimationLayer = cc.Layer.extend({
			   spriteSheet: null,
			   runningAction: null,
			   sprite: null,

	15.2 - this.sprite = cc.Sprite.createWithSpriteFrameName("runner0.png");

	15.3 -  //1.load spritesheet 
			cc.SpriteFrameCache.getInstance().addSpriteFrames(s_runnerplist);

			//2.create spriteframe array
			var animFrames = [];
			for (var i = 0; i < 8; i++) {
			    var str = "runner" + i + ".png";
			    var frame = cc.SpriteFrameCache.getInstance().getSpriteFrame(str);
			    animFrames.push(frame);
			}
			//3.create a animation with the spriteframe array along with a period time
			var animation = cc.Animation.create(animFrames, 0.1);

			//4.wrap the animate action with a repeat forever action
			this.runningAction = cc.RepeatForever.create(cc.Animate.create(animation));
			this.sprite = cc.Sprite.createWithSpriteFrameName("runner0.png");
	        this.sprite.setPosition(cc.p(80, 85));
	        this.sprite.runAction(this.runningAction);
	        this.runAction(cc.Sequence.create(actionTo));
	        this.spriteSheet.addChild(this.sprite);

16 - Chipmunk true
17 - globals.js -> var g_groundHight = 57;
					var g_runnerStartX = 80;	

18 - PlayScene -> space: null
	18.1 -   // init space of chipmunk
		    initPhysics:function() {
		        //1. new space object 
		        this.space = new cp.Space();
		        //2. setup the  Gravity
		        this.space.gravity = cp.v(0, -350);

		        // 3. set up Walls
		        var wallBottom = new cp.SegmentShape(this.space.staticBody,
		            cp.v(0, g_groundHight),// start point
		            cp.v(4294967295, g_groundHight),// MAX INT:4294967295
		            0);// thickness of wall
		        this.space.addStaticShape(wallBottom);
		    },

	18.2 - update:function (dt) {
		        // chipmunk step
		        this.space.step(dt);
		    }

	18.3 - onEnter:function () {
		        this._super();
		        this.initPhysics();

		        this.addChild(new BackgroundLayer());
		        this.addChild(new AnimationLayer(this.space));
		        this.addChild(new StatusLayer());

		        this.scheduleUpdate();
		    },

19 - AnimationLayer -> 
	19.1 - ctor:function (space) {
		        this._super();
		        this.space = space;
		        this.init();
		    },

	19.2 -  //1. create PhysicsSprite with a sprite frame name
	        this.sprite = cc.PhysicsSprite.createWithSpriteFrameName("runner0.png");
	        var contentSize = this.sprite.getContentSize();
	        // 2. init the runner physic body
	        this.body = new cp.Body(1, cp.momentForBox(1, contentSize.width, contentSize.height));
	        //3. set the position of the runner
	        this.body.p = cc.p(g_runnerStartX, g_groundHight + contentSize.height / 2);
	        //4. apply impulse to the body
	        this.body.applyImpulse(cp.v(150, 0), cp.v(0, 0));//run speed
	        //5. add the created body to space
	        this.space.addBody(this.body);
	        //6. create the shape for the body
	        this.shape = new cp.BoxShape(this.body, contentSize.width - 14, contentSize.height);
	        //7. add shape to space
	        this.space.addShape(this.shape);
	        //8. set body to the physic sprite
	        this.sprite.setBody(this.body);

20 - globals.js -> if(typeof TagOfLayer == "undefined") {
					    var TagOfLayer = {};
					    TagOfLayer.background = 0;
					    TagOfLayer.Animation = 1;
					    TagOfLayer.Status = 2;
					};

21 - AnimationLayer ctor -> this._debugNode = cc.PhysicsDebugNode.create(this.space);
							// Parallax ratio and offset
							this.addChild(this._debugNode, 10);

22 - BackgroundLayer -> map00:null,
						map01:null,
						mapWidth:0,
						mapIndex:0,